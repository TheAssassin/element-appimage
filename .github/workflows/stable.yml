# Sugar Build System
# (c) Srevin Saju 2020. All rights reserved 
# Licensed under MIT License
# Continuous Integration to release configured AppImages for Element (Riot) desktop client

name: Stable

on:
  schedule:
    - cron: "5 */12 * * *"
  push:
    branches: [master]
  pull_request:
    branches: [master]


jobs:
  centos:
    runs-on: ubuntu-18.04
    container:
      image: centos:7
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup user github 
        run: |
          yum -y install sudo
          useradd github
          usermod -aG wheel github
          sed -i 's,%wheel\tALL=(ALL)\tALL,%wheel\tALL=(ALL)\tNOPASSWD:ALL,g' /etc/sudoers
          su - github
      
      - name: Update Repository
        run: |
          sudo yum -y update

      - name: Install OpenSSL and Git
        run: |
          sudo yum -y install git openssl gcc-c++ make gcc openssl-devel tcl sqlite-devel libsecret libsecret-devel wget
          sudo yum -y groupinstall "Development Tools"

      - name: Current Directory Structure
        run: |
          ls 

      - name: Install SqlCipher
        run: |
          git clone https://github.com/sqlcipher/sqlcipher
          cd sqlcipher
          git checkout v4.4.0
          ./configure --prefix=/usr --enable-tempstore=yes \
                CFLAGS="$CFLAGS -DSQLITE_HAS_CODEC" LDFLAGS="-lcrypto"
          make
          DESTDIR=/usr sudo make install

      - name: Setup Node
        run: |
          curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -
          sudo yum -y install nodejs
          curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
          sudo rpm --import https://dl.yarnpkg.com/rpm/pubkey.gpg
          sudo yum -y install yarn
          yarn --version
          node --version


      - name: Clone Riot Desktop
        run: |
          git clone https://github.com/vector-im/element-desktop
          cd element-desktop && git checkout `curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/vector-im/element-desktop/releases/latest | jq  -r '.tag_name'` && cd ..
          cd element-desktop && git describe --tags && cd ..
      
      - name: Set up Rust / cargo
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y -q
          export PATH=$PATH:$HOME/.cargo/bin
          cargo --version
          rustc --version
          source $HOME/.cargo/env

      - name: Configure Element
        run: |
          source $HOME/.cargo/env
          cd element-desktop
          yarn install
          yarn run hak
          mkdir config && cd config
          wget https://raw.githubusercontent.com/vector-im/element-web/develop/config.sample.json
          mv config.sample.json config.json && cd ..
          yarn run fetch --importkey
          yarn run fetch --cfgdir config
          cp ../*.js src/.
          cp ../patch.sh .
          ./patch.sh
          yarn run electron-builder -l appimage --publish never
          ls dist
          mkdir -p dist/appimage
          mv dist/*.AppImage dist/appimage/.
          cd dist/appimage
          ./*.AppImage --appimage-extract
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x ./appimagetool-x86_64.AppImage
          rm Element*.AppImage
          cp -L /usr/lib/libsqlcipher.so.0 squashfs-root/usr/lib/.
          cp -L /lib64/libcrypto.so.10 squashfs-root/usr/lib/.
          cp -L /lib64/libssl3.so squashfs-root/usr/lib/.
          cp -L /lib64/libssl.so.10 squashfs-root/usr/lib/.
          ./appimagetool-x86_64.AppImage --appimage-extract-and-run --comp gzip squashfs-root -n
          rm -r ./appimagetool-x86_64.AppImage
          chmod +x *.AppImage
          mv *.AppImage Element-`git describe --tags`-GLIBC-`ldd --version | grep 'ldd ' | grep -o ').[0-9].[0-9][0-9]' | grep -o '[0-9].[0-9][0-9]'`.AppImage
          rm -rf squashfs-root

      - name: Upload Appimage
        uses: actions/upload-artifact@v1.0.0
        with:
          name: Element-stable-x86_64.AppImage
          path: 'element-desktop/dist/appimage/'


  Release:
    needs: [centos]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3.8]

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: Element-stable-x86_64.AppImage

    - uses: actions/download-artifact@v1
      with:
        name: Element-stable-old-x86_64.AppImage

    - name: Release
      uses: marvinpinto/action-automatic-releases@latest
      if: github.ref == 'refs/heads/master'
      with:
        automatic_release_tag: stable
        title: Stable AppImage Release
        prerelease: false
        files: |
          Element-stable-x86_64.AppImage

        repo_token: ${{ secrets.GITHUB_TOKEN }}
 
